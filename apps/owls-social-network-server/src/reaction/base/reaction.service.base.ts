/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Reaction as PrismaReaction,
  AppUser as PrismaAppUser,
  Hoot as PrismaHoot,
} from "@prisma/client";

export class ReactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReactionCountArgs, "select">): Promise<number> {
    return this.prisma.reaction.count(args);
  }

  async reactions(
    args: Prisma.ReactionFindManyArgs
  ): Promise<PrismaReaction[]> {
    return this.prisma.reaction.findMany(args);
  }
  async reaction(
    args: Prisma.ReactionFindUniqueArgs
  ): Promise<PrismaReaction | null> {
    return this.prisma.reaction.findUnique(args);
  }
  async createReaction(
    args: Prisma.ReactionCreateArgs
  ): Promise<PrismaReaction> {
    return this.prisma.reaction.create(args);
  }
  async updateReaction(
    args: Prisma.ReactionUpdateArgs
  ): Promise<PrismaReaction> {
    return this.prisma.reaction.update(args);
  }
  async deleteReaction(
    args: Prisma.ReactionDeleteArgs
  ): Promise<PrismaReaction> {
    return this.prisma.reaction.delete(args);
  }

  async getAppUser(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.reaction
      .findUnique({
        where: { id: parentId },
      })
      .appUser();
  }

  async getHoot(parentId: string): Promise<PrismaHoot | null> {
    return this.prisma.reaction
      .findUnique({
        where: { id: parentId },
      })
      .hoot();
  }
}
