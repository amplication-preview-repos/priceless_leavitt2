/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Reaction } from "./Reaction";
import { ReactionCountArgs } from "./ReactionCountArgs";
import { ReactionFindManyArgs } from "./ReactionFindManyArgs";
import { ReactionFindUniqueArgs } from "./ReactionFindUniqueArgs";
import { CreateReactionArgs } from "./CreateReactionArgs";
import { UpdateReactionArgs } from "./UpdateReactionArgs";
import { DeleteReactionArgs } from "./DeleteReactionArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { Hoot } from "../../hoot/base/Hoot";
import { ReactionService } from "../reaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Reaction)
export class ReactionResolverBase {
  constructor(
    protected readonly service: ReactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "read",
    possession: "any",
  })
  async _reactionsMeta(
    @graphql.Args() args: ReactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Reaction])
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "read",
    possession: "any",
  })
  async reactions(
    @graphql.Args() args: ReactionFindManyArgs
  ): Promise<Reaction[]> {
    return this.service.reactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Reaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "read",
    possession: "own",
  })
  async reaction(
    @graphql.Args() args: ReactionFindUniqueArgs
  ): Promise<Reaction | null> {
    const result = await this.service.reaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reaction)
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "create",
    possession: "any",
  })
  async createReaction(
    @graphql.Args() args: CreateReactionArgs
  ): Promise<Reaction> {
    return await this.service.createReaction({
      ...args,
      data: {
        ...args.data,

        appUser: args.data.appUser
          ? {
              connect: args.data.appUser,
            }
          : undefined,

        hoot: args.data.hoot
          ? {
              connect: args.data.hoot,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reaction)
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "update",
    possession: "any",
  })
  async updateReaction(
    @graphql.Args() args: UpdateReactionArgs
  ): Promise<Reaction | null> {
    try {
      return await this.service.updateReaction({
        ...args,
        data: {
          ...args.data,

          appUser: args.data.appUser
            ? {
                connect: args.data.appUser,
              }
            : undefined,

          hoot: args.data.hoot
            ? {
                connect: args.data.hoot,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reaction)
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "delete",
    possession: "any",
  })
  async deleteReaction(
    @graphql.Args() args: DeleteReactionArgs
  ): Promise<Reaction | null> {
    try {
      return await this.service.deleteReaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUser",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUser(
    @graphql.Parent() parent: Reaction
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hoot, {
    nullable: true,
    name: "hoot",
  })
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "read",
    possession: "any",
  })
  async getHoot(@graphql.Parent() parent: Reaction): Promise<Hoot | null> {
    const result = await this.service.getHoot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
