/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Hoot as PrismaHoot,
  Comment as PrismaComment,
  Reaction as PrismaReaction,
  AppUser as PrismaAppUser,
} from "@prisma/client";

export class HootServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HootCountArgs, "select">): Promise<number> {
    return this.prisma.hoot.count(args);
  }

  async hoots(args: Prisma.HootFindManyArgs): Promise<PrismaHoot[]> {
    return this.prisma.hoot.findMany(args);
  }
  async hoot(args: Prisma.HootFindUniqueArgs): Promise<PrismaHoot | null> {
    return this.prisma.hoot.findUnique(args);
  }
  async createHoot(args: Prisma.HootCreateArgs): Promise<PrismaHoot> {
    return this.prisma.hoot.create(args);
  }
  async updateHoot(args: Prisma.HootUpdateArgs): Promise<PrismaHoot> {
    return this.prisma.hoot.update(args);
  }
  async deleteHoot(args: Prisma.HootDeleteArgs): Promise<PrismaHoot> {
    return this.prisma.hoot.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.hoot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findReactions(
    parentId: string,
    args: Prisma.ReactionFindManyArgs
  ): Promise<PrismaReaction[]> {
    return this.prisma.hoot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reactions(args);
  }

  async getAppUser(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.hoot
      .findUnique({
        where: { id: parentId },
      })
      .appUser();
  }
}
