/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Hoot } from "./Hoot";
import { HootCountArgs } from "./HootCountArgs";
import { HootFindManyArgs } from "./HootFindManyArgs";
import { HootFindUniqueArgs } from "./HootFindUniqueArgs";
import { CreateHootArgs } from "./CreateHootArgs";
import { UpdateHootArgs } from "./UpdateHootArgs";
import { DeleteHootArgs } from "./DeleteHootArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { ReactionFindManyArgs } from "../../reaction/base/ReactionFindManyArgs";
import { Reaction } from "../../reaction/base/Reaction";
import { AppUser } from "../../appUser/base/AppUser";
import { HootService } from "../hoot.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Hoot)
export class HootResolverBase {
  constructor(
    protected readonly service: HootService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "read",
    possession: "any",
  })
  async _hootsMeta(
    @graphql.Args() args: HootCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hoot])
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "read",
    possession: "any",
  })
  async hoots(@graphql.Args() args: HootFindManyArgs): Promise<Hoot[]> {
    return this.service.hoots(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hoot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "read",
    possession: "own",
  })
  async hoot(@graphql.Args() args: HootFindUniqueArgs): Promise<Hoot | null> {
    const result = await this.service.hoot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hoot)
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "create",
    possession: "any",
  })
  async createHoot(@graphql.Args() args: CreateHootArgs): Promise<Hoot> {
    return await this.service.createHoot({
      ...args,
      data: {
        ...args.data,

        appUser: args.data.appUser
          ? {
              connect: args.data.appUser,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hoot)
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "update",
    possession: "any",
  })
  async updateHoot(@graphql.Args() args: UpdateHootArgs): Promise<Hoot | null> {
    try {
      return await this.service.updateHoot({
        ...args,
        data: {
          ...args.data,

          appUser: args.data.appUser
            ? {
                connect: args.data.appUser,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hoot)
  @nestAccessControl.UseRoles({
    resource: "Hoot",
    action: "delete",
    possession: "any",
  })
  async deleteHoot(@graphql.Args() args: DeleteHootArgs): Promise<Hoot | null> {
    try {
      return await this.service.deleteHoot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Comment], { name: "comments" })
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async findComments(
    @graphql.Parent() parent: Hoot,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reaction], { name: "reactions" })
  @nestAccessControl.UseRoles({
    resource: "Reaction",
    action: "read",
    possession: "any",
  })
  async findReactions(
    @graphql.Parent() parent: Hoot,
    @graphql.Args() args: ReactionFindManyArgs
  ): Promise<Reaction[]> {
    const results = await this.service.findReactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUser",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUser(@graphql.Parent() parent: Hoot): Promise<AppUser | null> {
    const result = await this.service.getAppUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
